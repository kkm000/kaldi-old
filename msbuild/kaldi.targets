<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="" InitialTargets="KaldiValidateConfiguration" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="KaldiValidateConfiguration">
    <Error Condition=" '$(BuildStage)' != '' and '$(BuildStage)' != 'Binary' and '$(BuildStage)' != 'Library' "
           Text="Invalid BuildStage. Are you running the top-level build project?"/>
    <Error Condition=" '$(BuildStage)' == 'Binary' and '$(KaldiBinaryTarget)' == '' "
           Text="For the Binary and Test build stages, KaldiBinaryTarget= specification is required. Are you running the top-level build project?"/>
    <Error Condition=" '$(Platform)' != 'Win32' and '$(Platform)' != 'x64' "
           Text="You have set Platform to a value other than 'Win32' or 'x64'. This will not work."/>
    <Warning Condition=" '$(KaldiCUDA)' == 'true' and '$(CUDAFound)' == '' "
             Text="CUDA has been requested in kaldi.user.props but not found. Install CUDA 6.5 (not supporting other versions at the moment)." />
  </Target>

  <Target Name="Test" DependsOnTargets="_BumpKaldiBuildDepthToTest;Build" Condition=" '$(BuildStage)' == '' " />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" Condition=" '$(BuildStage)' == '' " />

  <Target Name="Build" DependsOnTargets="_PrepareBuildStages" Condition=" '$(BuildStage)' == '' ">
    <MSBuild Targets="Build" Projects="@(_LibraryTarget)"/>
    <MSBuild Targets="Build" Projects="@(_BinaryTarget)" BuildInParallel="true" Condition=" $(KaldiBuildDepth) >= 1 "/>
    <MSBuild Targets="Build" Projects="@(_TestTarget)" BuildInParallel="true" Condition=" $(KaldiBuildDepth) >= 2 "/>
  </Target>

  <Target Name="Clean" DependsOnTargets="_PrepareBuildStages" Condition=" '$(BuildStage)' == '' ">
    <MSBuild Targets="Clean" Projects="@(_LibraryTarget)" Condition=" '@(_LibraryTarget)' != '' "/>
    <MSBuild Targets="Clean" Projects="@(_BinaryTarget);@(_TestTarget)" BuildInParallel="true" StopOnFirstFailure="false"/>
  </Target>

  <Target Name="_BumpKaldiBuildDepthToTest">
    <PropertyGroup>
      <KaldiBuildDepth>3</KaldiBuildDepth>
    </PropertyGroup>
  </Target>

  <Target Name="_PrepareBuildStages">
    <PropertyGroup>
      <_RunTest Condition=" $(KaldiBuildDepth) >= 3 ">true</_RunTest>
    </PropertyGroup>
    <ItemGroup>
      <_LibraryTarget Include="$(MSBuildProjectFile)" Condition=" '@(LibSource)' != '' ">
        <Properties>BuildStage=Library</Properties>
      </_LibraryTarget>
      <_BinaryTarget Include="$(MSBuildProjectFile)" Condition=" '@(BinSource)' != '' ">
        <Properties>BuildStage=Binary;KaldiBinaryTarget=%(filename)</Properties>
      </_BinaryTarget>
      <_TestTarget Include="$(MSBuildProjectFile)" Condition=" '@(TestSource)' != '' ">
        <Properties>BuildStage=Binary;KaldiBinaryTarget=%(filename);RunTest=$(_RunTest)</Properties>
      </_TestTarget>
    </ItemGroup>
  </Target>

  <Target Name ="_BeforeBuildAnyStage" >
    <!--<ItemGroup>
      --><!-- Convert all library references into project references. --><!--
      <ProjectReference Include="@(DependsOnLibs->'$(MSBuildProjectDirectory)\%(relativedir)%(filename).kwproj')" />
    </ItemGroup>-->
    <!-- Hack CUDA 6.5 into working with Intel XE 15.0 compiler. Other combinations untested. -->
    <!--<ItemGroup Condition=" '$(PlatformToolset.StartsWith(`Intel C++ Compiler`))' == 'true' ">
      <CudaCompile>
        <VCBinDir>$(ICInstallDir)bin\ia32\icl.exe</VCBinDir>
        <BaseCommandLineTemplate>-ccbin "%(CudaCompile.VCBinDir)" [GenerateRelocatableDeviceCode] [Include] [RequiredIncludes] [CInterleavedPTX] [GPUDebugInfo] [GenerateLineInfo] [Keep] [KeepDir] [MaxRegCount] [PtxAsOptionV] [TargetMachinePlatform] [NvccCompilation] [CudaRuntime] [AdditionalOptions]</BaseCommandLineTemplate>
        <RuntimeApiCommandLineTemplate>%(CudaCompile.BaseCommandLineTemplate) [HostDebugInfo] [Emulation] [FastMath] [Defines] %(CudaCompile.HostCommandLineTemplate) [CompileOut] "%(CudaCompile.FullPath)"</RuntimeApiCommandLineTemplate>
      </CudaCompile>
    </ItemGroup>
    <Message Text="Change: '%(CudaCompile.RuntimeApiCommandLineTemplate)'" Importance="high"  Condition=" '$(PlatformToolset.StartsWith(`Intel C++ Compiler`))' == 'true' " />-->

  </Target>

  <Target Name ="_BeforeBuildLibrary" BeforeTargets="_PrepareForBuild" DependsOnTargets="_BeforeBuildAnyStage" Condition=" '$(BuildStage)' == 'Library' ">
    <ItemGroup>
      <!-- Fetch all *.cc files from <LibSource> into the build as C/C++ sources. -->
      <ClCompile Include="@(LibSource->'$(_KaldiSrcSubdir)%(identity)')" Condition=" '%(extension)' == '.cc' " />
      <!-- Fetch all *.cu files as CUDA sources. -->
      <CudaCompile Include="@(LibSource->'$(_KaldiSrcSubdir)%(identity)')" Condition=" '%(extension)' == '.cu' and '$(KaldiCUDA)' == 'true' and '$(CUDAFound)' != '' " >
        <!--<VCBinDir>$(ICInstallDir)bin\ia32\icl.exe</VCBinDir>
        <BaseCommandLineTemplate>-ccbin "%(CudaCompile.VCBinDir)" [GenerateRelocatableDeviceCode] [Include] [RequiredIncludes] [CInterleavedPTX] [GPUDebugInfo] [GenerateLineInfo] [Keep] [KeepDir] [MaxRegCount] [PtxAsOptionV] [TargetMachinePlatform] [NvccCompilation] [CudaRuntime] [AdditionalOptions]</BaseCommandLineTemplate>
        <RuntimeApiCommandLineTemplate>%(CudaCompile.BaseCommandLineTemplate) [HostDebugInfo] [Emulation] [FastMath] [Defines] %(CudaCompile.HostCommandLineTemplate) [CompileOut] "%(CudaCompile.FullPath)"</RuntimeApiCommandLineTemplate>-->
      </CudaCompile>
    </ItemGroup>
    <!--<Message Text="@(CudaCompile->'%(RuntimeApiCommandLineTemplate)')" Importance="high" />
    <Message Text="@(CudaCompile->'%(identity)')" Importance="high" />-->

  </Target>

  <Target Name ="_BeforeBuildBinary" BeforeTargets="_PrepareForBuild" DependsOnTargets="_BeforeBuildAnyStage" Condition=" '$(BuildStage)' == 'Binary' ">
    <ItemGroup>
      <!-- Use Target as the source. Omit any checks, and let it fail cryptically if TargetName is incorrectly set. -->
      <ClCompile Include="$(_KaldiSrcSubdir)$(TargetName).cc"/>
    </ItemGroup>
  </Target>

  <Target Name="_BeforeLinkAnyStage" BeforeTargets="Link">
    <!-- If we've build a library in this location, add a dependency on it. -->
    <ItemGroup Condition=" '@(LibSource)' != '' ">
      <Link>
        <AdditionalDependencies>$(OutDir)$(MSBuildProjectName).lib;%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
    <!-- Add all library dependencies. I tried adding them as project references for automatic
          dependencies, but this works badly with Intel build scripts: everything is recompiled
          every time. So we should rely on the top level build script to have already build the
          libraries.
          For now, assume libs are at the target path. May reconsider with DLL build later. -->
    <ItemGroup Condition=" '@(DependsOnLibs)' != '' ">
      <Link>
        <AdditionalDependencies>@(DependsOnLibs->'$(OutDir)%(identity).lib');%(Link.AdditionalDependencies)</AdditionalDependencies>
      </Link>
    </ItemGroup>
  </Target>

  <Target Name ="_AfterLinkBinary" AfterTargets="Link" Condition=" '$(BuildStage)' == 'Binary' ">
    <!-- Linker always creates .lib an. .exp files for executable binaries if
         any symbols are dllexported. Reduce clutter, in our case they are useless. -->
    <Delete TreatErrorsAsWarnings="true" Files="$(OutDir)$(TargetName).lib;$(OutDir)$(TargetName).exp"/>
  </Target>

  <Target Name="_RunTest" AfterTargets="AfterBuild" Inputs="$(TargetPath)" Outputs="$(IntDir)$(TargetName).success" Condition=" '$(BuildStage)' == 'Binary' and  '$(RunTest)' == 'true' ">
    <Message Importance="high" Text="*** Running test: $(TargetPath)" />
    <Delete TreatErrorsAsWarnings="true" Files="$(IntDir)$(TargetName).success"/>
    <MakeDir Directories="$(_KaldiRootPath)/logs/$(PlatformToolset)" />
    <Exec Command="$(TargetPath) > $(_KaldiRootPath)/logs/$(PlatformToolset)/$(TargetName).log 2>&amp;1" WorkingDirectory="$(_KaldiSrcSubdir)" IgnoreStandardErrorWarningFormat="true" ContinueOnError="true"/>
    <PropertyGroup>
      <_TestSucceeded>$(MSBuildLastTaskResult)</_TestSucceeded>
    </PropertyGroup>
    <Touch AlwaysCreate="true" Files="$(IntDir)$(TargetName).success" Condition=" '$(_TestSucceeded)' == 'true' "/>
    <Delete TreatErrorsAsWarnings="true" Files="$(IntDir)$(TargetName).success" Condition=" '$(_TestSucceeded)' != 'true' "/>
    <Warning Text="Test $(TargetPath) has failed" Condition=" '$(_TestSucceeded)' != 'true' "/>
  </Target>

  <Target Name="_CleanAfterTest" BeforeTargets="CoreClean" Condition=" '$(BuildStage)' == 'Binary' ">
    <!-- Delete test success flag file. -->
    <Delete TreatErrorsAsWarnings="true" Files="$(IntDir)$(TargetName).success"/>
  </Target>

  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" Condition=" '$(BuildStage)' != '' "/>
  <Import Project="$(CUDAPropsPath)\CUDA 6.5.targets" Condition=" '$(BuildStage)' != '' and '$(KaldiCUDA)' == 'true' and '$(CUDAFound)' == '65' "/>
</Project>
